对于不变的量，尽量使用const声明为常量

DOM对象：浏览器根据HTML标签生成的js对象，包括所有的标签属性；document对象：是DOM里提供的对象，用来访问和操作页面内容，网页的所有内容都在其中
节点--构成HTML文档最基本单元，分为4类：文档节点--整个HTML文档、元素节点--HTML文档中的标签、属性节点--元素的属性、文本节点--HTML标签中文本内容
浏览器已经为我们提供了文档节点这个对象，这个对象是window属性，可以在页面中直接使用，文档节点代表整个网页
一个简单的例子：
<body>
    <button id="btn">一个按钮</button>
    <script>
        var btn = document.getElementById("btn");
        console.log(btn); //<button id="btn">一个按钮</button>
        btn.innerHTML = "a button"; //修改按钮的文字
    </script>
</body>

事件：用户和浏览器之间的交互行为，如点击按钮、鼠标移动、关闭窗口等等
可以在事件对应的属性中设置js代码，当事件被触发时，这些代码会被执行
一个简单的例子：
<body>
    <button id="btn" onclick="alert('点击了按钮');">一个按钮</button>
</body>
这种写法将结构和行为耦合，不方便维护。可以为按钮的对应事件绑定处理函数来响应事件：
<body>
    <button id="btn">一个按钮</button>
    <script>
        var btn = document.getElementById("btn");
        btn.onclick = function(){
            alert("点击了按钮");
        }; //一个回调函数，当对应事件被触发时执行
    </script>
</body>
注意：浏览器加载页面时，按照自上而下执行代码。如果将<script>标签写到<body>上面，在代码执行时，页面还没加载（元素没被创建），代码无法获取到元素，可能会发生错误。因此一般都将<script>标签写到<body>下面
onload事件：在整个页面加载完成后触发，用此事件可以将<script>标签写到任意位置而不报错
<script>
    window.onload = function () {
        var btn = document.getElementById("btn");
        btn.onclick = function () {
            alert("点击了按钮");
        };
    }; //将要执行的js代码写到onload里
</script>
<body>
    <button id="btn">一个按钮</button>
</body>


1、获取DOM对象
（1）根据CSS选择器：
document.querySelector("CSS选择器")
const box = document.querySelector('div'); //选择第一个div标签，若没有选择到则返回null
box可以直接进行修改
document.querySelectorAll("CSS选择器")
const boxs = document.querySelectorAll('div'); //选择所有的div标签，以NodeList伪数组的形式返回
NodeList：有长度和索引，但没有pop和push等方法，可以进行用与数组相同的方法进行遍历操作
获取html元素：
（2）get系列方法：
document.getElementById('a'); //获取第一个id为a的元素
document.getElementsByClassName('a'); //获取页面中所有类名为a的元素
document.getElementsByTagName('div'); //获取页面中所有div标签元素

2、操作元素内容
（1）对象.innerText属性
console.log(box.innerText); //获取文字内容
box.innerText = "修改box里面的内容"; //直接进行修改
注意该属性只操作于纯文本，不会解析HTML标签，如<strong>等
（2）对象.innerHTML属性
该属性会解析HTML标签
<div class="box">内容</div>
<script>
    const box = document.querySelector('.box');
    console.log(box.innerHTML); //内容
    box.innerHTML = "<strong>更改内容</strong>"; //会发现有加粗的效果
</script>

3、操作元素属性
（1）常用属性href title src等
语法：对象.属性 = 值
const img = document.querySelector('img');
img.src = "new.png";
img.title = "新图片";
页面刷新时随机更换图片：（页面刷新时随机数就直接生成了，无需捕捉刷新的事件）
const img = document.querySelector('img');
const max = 6, min = 1;
const random = Math.floor(Math.random() * (max - min + 1) + min);
img.src = `${random}.png`;
（2）样式属性
--通过style修改  语法：对象.style.样式属性 = 值
const box = document.querySelector(".box");
box.style.width = "200px"; //注意长度单位要写px
box.style.border = '5px dashed black';
//对于属性中有“-”的情况，有两种解决方案
box.style.backgroundColor = "red"; //使用将属性写成驼峰命名形式
box.style["background-color"] = "blue"; //使用[]来根据key取value
设置整个页面的背景图片
document.body.style.backgroundImage = 'url(xxx.png)';
--通过类名修改，适用于修改样式较多的情况  语法：对象.className = '类名'
<style>
    .new_div{
        /*要修改的CSS样式*/
    }
</style>
<body>
    <div class="old_div">div</div>
</body>
<script>
    const div = document.querySelector("div"); //获取元素
    div.className = 'new_div'; //给div新的类名，并覆盖前面的类样式
</script> 
如果想继承之前的类名，在之前类CSS样式基础上增加新属性，就写成div.className = 'old_div new_div'形式
--通过classList控制CSS，解决className易覆盖的问题  
const div = document.querySelector("div"); //获取元素
div.classList.add('new_div'); //增加类名，相当于div.className = 'old_div new_div'
div.classList.remove('new_div'); //删除类名
div.classList.toggle('old_div'); //切换类名，如果div已经有了old_div就将其删去，没有就把它加上
（3）表单属性
-- <input type="text">
const input = document.querySelector('input');
console.log(input.value); //获取表单里面的值
input.value = "新值"; //修改表单里面的数据
input.type = 'password'; //修改表单属性
对于表单中添加后有效果、移除后无效果的属性（如disabled checked等），用bool值表示，true表示添加、false表示移除
-- <input type="checkbox"> 
const input = document.querySelector('input');
console.log(input.checked); //判断是否勾选
input.checked = true; //改变勾选状态
-- <button>
const btn  =document.querySelector('button');
console.log(btn.disabled); //按钮是否禁用--为true禁用，为false不禁用（默认）
btn.disabled = true; //禁用按钮
（4）自定义属性：标签中以"data-"开头的属性，如<div data-id="1" data-sm="a">1</div>
const one = document.querySelector('div');
console.log(one.dataset); //输出该标签里面所有的自定义属性（键值对形式）
console.log(one.dataset.id); //获取自定义属性data-id
one.dataset.id = "new"; //改变自定义属性data-id

3、定时器--间歇函数
setInterval(函数,间隔时间)
间隔时间单位为ms，表示隔多长时间执行一次传入函数。打开网页时不会立即执行，而是等待间隔时间后开始第一次执行
function func() {
    console.log("执行了func函数");
}
setInterval(func, 1000); //开启定时器
或
setInterval('func()', 1000);
如果需要传参
function func(content) {
    console.log(content);
}
let cont = "abc";
setInterval(function () {
    func(cont);
}, 1000);
该函数返回一个id数字，标记页面中定时器函数序列
暂停定时器：clearInterval(timer_id)
let timer_1 = setInterval(func, 1000); //注意此处不能声明为const，因为后面开启定时器时要对timer_1重新赋值
let timer_2 = setInterval(func, 1500);
console.log(timer_1, timer_2); //1  2
clearInterval(timer_1); //关闭timer_1定时器
clearInterval(timer_2);
timer_2 = setInterval(func, 1500); //开启timer_2定时器  
console.log(timer_2); //3  注意这里不是1，即使关闭了所有定时器，页面中只有1个定时器在运行

已阅读注册协议倒计时按钮，倒计时结束后可点击按钮：
<body>
    <!-- 开始时要把按钮禁用 -->
    <button disabled></button>
</body>
<script>
    const btn = document.querySelector('button');
    let time = 5; //初始值
    btn.innerHTML = `我已阅读用户协议(${time})`;
    let timer = setInterval(function () {
        time--;
        btn.innerHTML = `我已阅读用户协议(${time})`;
        if (time === 0) {
            btn.disabled = false;
            clearInterval(timer);
            btn.innerHTML = "我已阅读用户协议";
        }
    }, 1000);
    /*if(time ==0)
    {
        btn.disabled = false;
        clearInterval(timer);
    }*/
</script>
注意if函数一定要写到定时器函数里面，因为这个判断语句也是要循环运行的。如果写在外面，就只会在最开始执行一次，此时time=5，不会停止定时器

4、事件
事件种类--鼠标事件：click点击 mouseenter鼠标经过 mouseleave鼠标离开 
焦点事件（表单获得光标）--focus获得焦点 blur失去焦点
键盘事件--keydown按下按键 keyup抬起按键
文本事件--input用户向表单输入信息
（1）事件监听
元素对象.addEventListener('事件类型',要执行的函数)
三要素：事件源--哪个dom元素被触发了、事件类型--用什么方式触发（click等）、事件调用的函数--触发后要作什么
const btn = document.querySelector("button");
btn.addEventListener('click', function () {
    alert("点击了按钮");
});
btn.addEventListener('mouseover', function () {
    console.log("鼠标经过按钮");
})

以前的写法：btn.onclick = function(){}
缺点是如果一个对象同一个事件绑定了多个function()，onclick因为是赋值方式传递，只能执行最后一个function()
（2）焦点事件
应用于：鼠标移入输入框时出现光标（获得焦点），此时出现下拉栏用于快捷输入；鼠标移出时光标消失（失去焦点）
const input = document.querySelector('input');
input.addEventListener('focus',function(){
    console.log("获得焦点");
});
input.addEventListener('blur',function(){
    console.log("失去焦点");
});
（3）键盘事件和文本事件
都是对于表单来说的
键盘事件：keydown按下按键 keyup抬起按键     按下时会一直发送keydown事件信号
文本事件：input当文本框中内容改变时触发
const input = document.querySelector('input');
input.addEventListener('input',function(){
    console.log(input.value); //内容改变时获取内容
});
（4）事件对象：也是一个对象，存储事件触发时的相关信息（如鼠标点击的位置，按下的是哪个键等等）
调用:事件监听绑定的回调函数的第一个参数，如input.addEventListener('input', function (event) {});中的event就是事件对象
事件对象常用属性：
type--当前的事件类型
clientX/clientY--获取光标相对浏览器可见窗口左上角的位置
offsetX/offsetY--获取光标相对当前dom元素左上角的位置
更多关于光标位置的属性：https://juejin.cn/post/6883353218319908871
key--用户按下键的值
const input = document.querySelector('input');
input.addEventListener('input',function(){
    console.log(event.key); //获取按的是哪个键
});
（5）环境对象
每个函数里面都要this--环境对象，谁调用该函数this就是谁。事件监听中传入函数的this就是事件源

5、事件流
（1）事件流：事件完整执行过程中的流动路径，分为捕获和冒泡两个阶段
假设页面中有1个<div>，捕获就是从父到子（Document -> <html> -> <body> -> <div>），冒泡就是从子到父（<div> -> <body> -> <html> -> Document）；实际中主要使用实际冒泡
addEventListener可传入第三个参数，true--捕获阶段触发（很少使用），false--冒泡阶段触发（默认值）
<body>
    <div class="father">
        <div class="son"></div>
    </div>
</body>
<script>
    const father = document.querySelector('.father');
    const son = document.querySelector('.son');
    document.addEventListener('click', function () { //document表示整个页面
        console.log("document被点击");
    }, true);
    father.addEventListener('click', function () {
        console.log("father被点击");
    }, true);
    son.addEventListener('click', function () {
        console.log("son被点击");
    }, true);
</script>
输出：document被点击  father被点击  son被点击
（2）事件冒泡：当一个元素触发事件后，会依次向上调用索引父级元素的同名事件，注意一定是同名事件
若去掉上述代码中的true，恢复为默认状态，则输出：son被点击  father被点击  document被点击
鼠标事件中mouseover-mouseout与mouseenter-mouseleave都可表示鼠标的进入和离开，区别是mouseover组有冒泡的属性
（3）阻止冒泡：e.stopPropagation() 需要获取事件对象
事件冒泡易导致事件影响到父级元素，要想把事件限制在当前元素内，就要阻止冒泡；此方法可阻断事件流动传播，不仅阻止冒泡，也阻止捕获
更改son的事件监听为：
    son.addEventListener('click', function (e) { 
        console.log("son被点击");
        e.stopPropagation(); //阻止冒泡
    });
此时只输出"son被点击"
（4）解绑事件removeEventListener()
--使用on系列方法的事件绑定（如btn.onclick=...;），只需重写onclick将之前的覆盖：btn.onclick = null;
--addEventListener方法的事件，必须使用removeEventListener(事件类型，与事件监听相同的事件处理函数)的方式。因为必须传入同名的事件处理函数，所以使用匿名函数创建的事件监听无法解绑
function func(){
    console.log("son被点击");
}
son.addEventListener('click', func);
son.removeEventListener('click',func);
（5）阻止事件默认行为e.preventDefault()
对于超链接、表单这种网页已经设置它们行为（如提交表单、跳转链接）的标签，可以使用e.preventDefault()阻止这种默认行为，如
<body>
    <a href="http://www.baidu.com">百度一下</a>
</body>
<script>
    const a = document.querySelector('a');
    a.addEventListener('click',function(e){
        e.preventDefault(); //阻止默认行为
    });
</script>
此时点击链接就不会进行跳转
（6）mouseover与mouseenter的区别
鼠标事件中mouseover-mouseout与mouseenter-mouseleave都可表示鼠标的进入和离开，区别是mouseover组有冒泡的属性，而mouseleave没有
<body>
    <div class="father">
        <div class="son"></div>
    </div>
</body>
<script>
    const father = document.querySelector('.father');
    father.addEventListener('mouseover', function () {
        console.log("鼠标经过father");
    });
    father.addEventListener('mouseout', function () {
        console.log("鼠标离开father");
    });
</script>
当鼠标从father的div进入son的div时，会输出：鼠标经过father  鼠标离开father  鼠标经过father
因为鼠标经过son时，虽然son没有给出'mouseover'对应的事件函数，但son的'mouseover'事件仍会被触发，同时因为冒泡而触发了father的'mouseover'事件，所以会又输出一个"鼠标经过father"
而正常情况下不想让鼠标进入son时触发“鼠标经过father”的事件。使用mouseenter组后，重复执行上面的操作，只会输出一次"鼠标经过father"

6、事件委托：利用事件冒泡的特性，给多个子元素的共同父元素注册事件，当触发子元素的事件时，会冒泡到父元素的同名事件
如实现一个无序列表中，点击其中的每个小li，当前li文字就变为红色
<body>
    <ul>
        <li>第1个li</li>
        <li>第2个li</li>
        <li>第3个li</li>
        <li>第4个li</li>
        <li>第5个li</li>
        <p>不变色的p</p>
    </ul>
</body>
<script>
    const ul = document.querySelector('ul');
    ul.addEventListener('click', function (e) {
        const target = e.target; //获取点击的对象
        if (target.tagName == 'LI') //如果点击的是li标签（注意tagName对应的'LI'要大写）
            target.style.color = 'red'; //改变颜色
    });
</script>

7、其它事件
（1）页面加载事件
若将js代码写到body上面，获取标签对象时会报错）因为对应标签还没有被创建
此时可以使用load加载事件：
window.addEventListener('load',function(){ //整个页面加载完成后执行
    document.querySelector('a').addEventListener('click',func);
}); 
或
a.addEventListener('load',function(){ //a标签加载完成后执行
    document.querySelector('a').addEventListener('click',func);
});
当初始的HTML文档完全加载后，document的DOMContentLoaded事件被触发，无序等待样式表、图像完全加载
document.addEventListener('DOMContentLoaded', function () {
    console.log('html加载完成');
});
（2）页面滚动事件
可以给页面或某个元素加scroll事件，只要该元素有滚动条即可
事件属性值：scrollTop和scrollLeft表示元素被卷去的距顶部/左边的距离。
卷去：滚动条下拉，元素块上移，此时元素顶部会被覆盖（不可见，被卷入页面上方）一段距离，该距离就是卷去的距离
const div = document.querySelector('.scroll');
div.addEventListener('scroll', function () {
    console.log(div.scrollTop);
}); //div元素内的滚动距离
window.addEventListener('scroll', function () {
    console.log(document.documentElement.scrollTop); //特殊之处：需获取html元素再.scrollTop；不是window.scrollTop
}); //整个页面的滚动距离
这两个属性值是数字型（单位为px）、可读写的（赋值的时候也是直接给数字）
滚动到顶部：document.documentElement.scrollTop = 0; 或window.scrollTo(0,0);
（3）页面尺寸事件
'resize'是浏览器窗口大小发生变化时触发的事件
window.addEventListener('resize', function () {
    console.log("页面尺寸改变");
});
（4）元素的宽高和位置
--client系列：
获取元素宽高（不包括border、margin和滚动条，只包括content和padding）：clientWidth/clientHeight，得到的是数值型
const div = document.querySelector('.scroll');
console.log(div.clientWidth); //获取元素宽度
console.log(div.clientHeight); //获取元素高度
--offset系列：
获取元素尺寸（包括content、padding、border和滚动条）：offsetWidth/offsetHeight
获取元素位置（距最近的定位祖先元素的左/上距离）:offsetLeft/offsetTop
使用方式同上，注意它们都是是只读属性
定位祖先元素：使用相对/绝对定位的祖先元素，如果该元素没有这样的父级元素，offsetLeft/offsetTop指的就是与页面左侧/顶部的距离
--getBoundingClientRect()方法
返回元素的宽高以及相对于视口（浏览器窗口边框）的位置，如
const div = document.querySelector('div');
console.log(div.getBoundingClientRect());
返回一个DOMRect对象，其中  width-宽度 height-高度（不包括border和margin，只包括content和padding）；top-元素顶部与视口顶部距离 left-元素左边与视口左边距离（可以为负数，表示部分元素被遮盖）


小案例：当页面滚动到<div class="sk">时，顶部导航栏<div class="header">从上到下从页面顶部滑出
关键1：如果判断页面滚动到sk模块--当页面被卷去的头部距离>=sk距页面顶端的距离时
关键2：如何让导航栏从上到下滑出--设置已知高度为80px的header初始定位方式为fixed，将top值设为-80px，同时设置transition想让它滑多长时间；当想让它滑出时，就把top设为0px，让它从隐藏转为展示
const sk = document.querySelector('.sk');
const header = document.querySelector('.header');
window.addEventListener('scroll', function () {
    const n = document.documentElement.scrollTop;
    if (n >= sk.offsetTop) { //页面滚动到sk模块
        header.style.top = 0; //滑出
    }
    else {
        header.style.top = "-80px"; //滑入
    }
    header.style.top = n >= sk.offsetTop ? 0 : "-80px"; //以上if语段相当于这个三元表达式
});

注意：使用更改document.documentElement.scrollTop的方法设置页面位置时，不能
let n = document.documentElement.scrollTop;  n = 200;   只能
document.documentElement.scrollTop=200;

8、Date对象与计时器的结合：
倒计时效果：用将来时间的时间戳减去现在时间的时间戳，将得到的剩余的时间戳转换为时分秒单位，并使用定时器进行更新
function get_time(second) { //将秒数转换成天时分秒
    let d = parseInt(second / 60 / 60 / 24);
    let h = parseInt(second / 60 / 60 % 24);
    h = h < 10 ? '0' + h : h;
    let m = parseInt(second / 60 % 60);
    m = m < 10 ? '0' + m : m;
    let s = parseInt(second % 60);
    s = s < 10 ? '0' + s : s;
    return `${d}天${h}时${m}分${s}秒`;
}
function get_countdown(futher) //根据将来的时间戳作倒计时
{
    const now = +new Date(); //现在的时间戳
    const count = (futher - now) / 1000; //得到剩余的时间戳（转换成秒数方便后续计算
    return get_time(count);
}
const div = document.querySelector('div');
const futher = +new Date("2024-2-7 18:30:00"); //将来的时间戳
div.innerHTML = get_countdown(futher); //设置初始值
let timer = setInterval(function () { //开启定时器，每1秒刷新1次
    div.innerHTML = get_countdown(futher);
}, 1000);

9、DOM节点
元素节点：所有的标签，html标签是根节点
属性节点：所有的标签属性
文本节点：所有的文本
对节点的操作以元素节点为主
（1）查找节点
--父节点： 子元素.parentNode  返回它最近的父节点DOM对象，若没有则返回null
<div class="dad">
    <div class="son"></div>
</div>
const son = document.querySelector('.baby');
const dad = son.parentNode;  //得到<div class="dad">
--子节点： 父元素.children  以伪数组的形式返回所有的子节点（不包含孙节点）
<ul>
    <li></li>
    <li></li>
    <li></li>
    <li></li>
    <li></li>
</ul>
const ul = document.querySelector('ul');
const li_list =ul.children; //得到包含5个小li的伪数组
--兄弟节点
上一个兄弟节点：  元素.previousElementSibling
下一个兄弟节点：  元素.nextElementSibling
<ul>
    <li>1</li>
    <li>2</li>
    <li>3</li>
    <li>4</li>
    <li>5</li>
</ul>
const li2 = document.querySelector('ul li:nth-child(2)');
const li1 = li2.previousElementSibling; //上一个兄弟节点li1
const li3 = li2.nextElementSibling; //下一个兄弟节点li3
（2）增加节点
--首先要创建节点：document.createElement('标签名');
const new_li = document.createElement('li');
这个新创建的节点是DOM对象，可以进行更改属性值等操作

--之后追加节点（插入到某个父元素中）
插入到父元素的最后：  父元素.appendChild(要插入的元素)
插入到父元素的前面：  父元素.insertBefore(要插入的元素,插入到父元素的哪个子元素前面)
const ul = document.querySelector('ul');
const new_li = document.createElement('li');
ul.appendChild(new_li); //将新创建的li加到ul的最后
ul.insertBefore(new_li,ul.children[0]); //将新创建的li加到ul的最前面
如果想要插入到页面中（以body作父元素）：document.body.appendChild(new_li);
注意：如想在新创建的节点中再写标签，不一定要再创建节点，可以直接new_li.innerHTML = `<div> <p>我是new_li</p> </div>`;这等效于
<li>
    <div>
        <p>我是new_li</p>
    </div>
</li>
（3）克隆节点：  想复制的节点.cloneNode(bool)  返回复制后的DOM对象，bool值为true则会包含想复制节点的内容文本和全部后代节点；为false（默认值）则不包含后代节点和内容文本，只包含想复制的节点标签
const new_li= li1.cloneNode(true); //复制li1及其内容文本和后代节点
（4）删除节点：必须通过父元素删除，若不存在父子关系则删除不成功
父元素.removeChild(子元素)
const ul = document.querySelector('ul');
ul.removeChild(ul.children[0]); //删除ul的第一个li标签
删除节点和隐藏节点(display:none)不同，隐藏节点还存在只是不显示，而删除就让html中彻底没有该元素了

10、移动端事件（M端事件）
在Android和iOS上触屏事件：touch对象
常见的触屏事件：
touchstart--手指触摸到一个DOM元素时触发
touchmove--手指在一个DOM元素上滑动时触发
touchend--手指从一个DOM元素上移开时触发
添加监听的方式与之前的相同：
const div = document.querySelector('div');
div.addEventListener('touchstart', function () {
    console.log('touch');
});
div.addEventListener('touchmove', function () {
    console.log('move');
});
div.addEventListener('touchend', function () {
    console.log('end');
});

swiper插件：可以从官网https://swiper.com.cn/上查看各种动画的效果，并在下载资源https://swiper.com.cn/download/index.html中demo文件夹下找到对应的网页源码
在自己的html中使用：例如在自己页面的一个div中插入swiper中的轮播图
（1）导入文件并创建网页的基础结构
<link rel="style sheet" href="../swiper/swiper-bundle.min.css" />
<script src="../swiper/swiper-bundle.min.js"></script>
（2）打开对应的swiper网页源码，复制粘贴
css--style部分  html--body部分  js--script部分都要cv
（3）之后根据实际情况进行微调，如调整<div class="box">的定位为相对定位（配合swiper的元素设置使全部标签显示出来、给.swiper添加`overflow:hidden`（使超出边界部分隐藏以达到轮播的效果）等等
https://swiper.com.cn/api/index.html中提供了很多相关的方法，可以根据实际情况进行调整