BOM：浏览器对象模型
window对象是全局对象，是JS中的顶级对象
document、alert()、console.log()等等都是window的属性，基本BOM的属性方法都是window的
所有通过var定义在全局作用域中的变量函数都属于window，const和let定义的不属于
调用window对象下的属性方法是可以省略window.

定时器--延时函数：setTimeout(回调函数,等待的毫秒数)
它只执行一次，表示等待多少秒后执行回调函数，不会像setInterval()一样直到关闭一直执行
清除延时函数：clearTimeout(定时器id);
一般情况下都不需要清除（因为它只执行一次），特殊情况（如递归调用延时函数）时需要清除
let timer = setTimeout();  clearTimeout(timer);
注意：延时函数后面的代码会先执行，因为延时函数内的回调函数需等待一段时间才执行
let timer = setTimeout(function () {
    console.log("调用setTimeout");
},0);
console.log("hello");  //先"hello"再"调用setTimeout"

JS是单线程语言，同一时间只能做1件事，易造成代码执行的阻塞。为解决这个问题，HTML5运行js创建多个线程，出现了同步和异步。
同步：前一个任务结束后再执行下一个，执行顺序就是任务的排列顺序
异步：如果某个任务耗时很长，在处理该任务同时还可以执行其它任务，使执行顺序不同于任务的排列顺序
同步任务都在主线程上执行，形成一个执行栈；异步任务（如定时器、资源加载、各种事件）添加到任务队列/消息队列中
JS的执行机制：事件循环
1、将任务分类：先执行执行栈中的同步任务，将异步任务放入任务队列中；、
2、当执行栈中所有同步任务执行完毕，系统会按次序反复读取任务队列中的异步任务，当该异步任务需要被执行时（如定时器到了执行时间、触发了某个事件）就进入执行栈执行
主线程不断重复获得任务、执行任务，这种机制称为事件循环eventloop
因此，在上面的例子中，即使延时时间为0，也会最后执行

location对象：属于window对象，拆分并保存了URL地址的各个部分
1、location.href--当前页面的url地址，可以用于自动跳转页面，如
location.href = 'http://baidu.com';就可以在打开页面时自动转到http://baidu.com
小案例：5秒后自动跳转到<a>链接
<body>
    <a href="http://baidu.com">支付成功<span style="color: red;">5</span>秒钟后跳转到首页</a>
</body>
<script>
    const span = document.querySelector('span');
    let num = 5;
    let timer = setInterval(function () {
        num--;
        span.innerHTML = `${num}`;
        if (num == 0) {
            clearInterval(timer);
            location.href = 'http://baidu.com';
        }
    }, 1000);
</script>
2、location.search--url地址后?后面的部分（即地址携带的参数）
3、location.hash--url地址后#后面的部分
4、location.reload()--刷新页面 （相当于按f5/点击刷新按钮）
location.reload(true)--强制刷新（相当于按CTRL+f5）

navigator对象：记录了浏览器自身的相关信息
navigator.userAgent检测浏览器版本和平台，用于根据访问者的设备类型跳转对应网页（PC/移动端）等

histroy对象：管理历史记录，用于浏览器页面中前进/后退按钮
history.back()--后退1个页面
history.forward()--前进1个页面
history.go(-n)--后退n个页面
history.go(n)--前进n个页面

本地存储：将数据存储在浏览器中，刷新页面后数据不丢失。分为localStorage和sessionStorage
localStorage：以键值对的形式存储，在f12->应用程序->本地存储->点击左侧小箭头展开中可以找到存储的信息
存储数据--localStorage.setItem(键,值)
读取数据--localStorage.getItem(键)
删除数据--localStorage.removeItem(键)
localStorage.setItem('name', 'abc');
console.log(localStorage.getItem('name')); //abc
localStorage.removeItem('name');
更改某个键的值--localStorage.setItem(键,新值)  此时如果已有这个键就是改，没有就是增
注意：本地存储只能存储字符串类型的数据，无论setItem的值是什么类型，都会转为字符串类型进行存储
sessionStorage：关闭浏览器窗口后数据消失（localStorage只要不删数据就会一直存在），用法和localStorage基本相同。因此一般都使用localStorage

存储复杂数据类型：将数据封装到对象中，再转换成json字符串存储；取的时候，再把json字符串转换成对象按键取值
const obj = {
    name: 'abc',
    age: 18,
    gender: "男"
};
const obj_json = JSON.stringify(obj); //对象转json
localStorage.setItem('obj', obj_json); //存储json
const get_obj_json = localStorage.getItem('obj'); //取出json字符串
const get_obj = JSON.parse(get_obj_json); //json转成对象
console.log(get_obj['name']); //按键取值
