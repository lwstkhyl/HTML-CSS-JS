作用域链本质上是底层的变量查找机制：函数执行时会优先查找当前函数作用域中变量，若当前作用域查不到会依次逐级查找父级作用域中变量，直到全局作用域。
子作用域可以访问父作用域，但父作用域无法访问子作用域  

垃圾回收机制：全局变量一般不会回收（直到关闭页面时），局部变量不用时会被自动回收
内存泄露：程序分配的内存由于某种原因没释放/无法释放

闭包：内层函数+外层函数的变量，作用是将变量封闭在函数内，避免变量污染，同时外部可以访问函数内变量。缺点是可能引起内层泄露（外层函数内变量可能不会被释放）
一个简单的形式：
function outer() {
    let a = 10; //外层函数的变量
    function inner() { //内层函数
        console.log(a);
    }
    inner();
}
outer();  //10  
基本形式：
function outer() {
    let a = 10; //外层函数的变量
    function inner() { //内层函数
        console.log(a);
    }
    return inner;
}
const inner_func = outer();
inner_func(); //10
应用--统计函数调用次数：
采用这种方法可以实现目的，但count是全局变量，易被修改
let count = 0;
function func(){
    count++;
    console.log(`函数调用了${count}次`);
}
func();
闭包的形式：count变量在全局不会被修改
function outer(){
    let count = 0; //实现了count这个变量的私有
    function func(){
        count++;
        console.log(`函数调用了${count}次`);
    }
    return func; //必须将内层函数返回，以便在全局操作
}
const fn = outer(); //fn就是内层的func函数
fn(); //调用func函数

函数的动态参数：当不确定传给函数几个实参时，使用函数的arguments参数获得传入的实参，它是一个伪数组，包含传入的实参，并且只存在于函数中
如求出所有实参之和的函数：
function getSum() {
    let sum = 0;
    for (let i = 0; i < arguments.length; i++) {
        sum += arguments[i];
    }
    return sum;
}
console.log(getSum(2, 2, 1, 3, 5)); //13
函数的剩余参数：使用形参 ...变量名  来接收传入的实参，该变量是一个数组，里面元素为传入的实参
function func(...other) {
    console.log(other); //使用的时候不需要写...
}
func(1, 1, 2); //(3) [1, 1, 2]
它们的区别在于：剩余参数之前还可以定义形参，此时剩余参数就是有定义形参后传入的实参
function func(a, b, ...other) {
    console.log(other);
}
func(1, 1); //[]
func(1, 1, 2, 3, 4); //(3) [2, 3, 4]
建议使用剩余参数，因为它更加灵活，而且是真数组

上面的...称为展开运算符，可以将一个数组展开，且不改变原数组
const arr = [1,2,3];
console.log(...arr); //1  2  3
console.log(Math.max(...arr)); //求数组中元素最大值（因为Math.max必须接收数值型变量）
const arr1 = [1,2,3];
const arr2 = [4,5,6];
const arr_merge = [...arr1,...arr2]; //合并数组

箭头函数：更简洁的函数写法，且不绑定this，适用于需要使用匿名函数的地方
写法：变量（函数名） = (形参) => {函数体}
const func = (a,b) => {
    console.log(a,b);
};
func(1,2); //1 2
当只有1个形参时可以省略小括号：
const func = a => {
    console.log(a);
};
当只有1行代码时可以省略大括号，这行代码会被自动作为返回值返回
const func = a => console.log(a);
func(1); //1
const func = a => a + a;
console.log(func(1)); //2
例如想阻止表单的默认行为：
const form = document.querySelector('form');
form.addEventListener('submit',e => e.preventDefault());

箭头函数可以直接返回一个对象：
const func = function (uname) {
    return { uname: uname };
};
console.log(func('abc')); //{uname: 'abc'}
相当于：
const func = (uname) => ({uname:uname});
如果不加{}外的小括号，就无法分清是函数体的{}还是对象的{}，因此要加小括号

例：使用箭头函数求和
const getSum = (...arr) => {
    let sum = 0;
    for (let i = 0; i < arr.length; i++) {
        sum += arr[i];
    }
    return sum;
}
console.log(getSum(1, 2, 3)); //6

箭头函数的this：正常函数this都是指调用它的对象，而箭头函数不会创建自己的this，只会从自己作用域链的上一层沿用this
const func = () => {
    console.log(this);
};
func(); //window
之所以是window，不是因为window调用了func函数，而是因为func函数作用域的上一级作用域内（全局作用域）内的this就是指window
const obj = {
    name:'abc',
    say_hi:()=>{
        console.log(this);
    }
};
obj.say_hi(); //window
因为say_hi在obj作用域内，所以this指向与obj内this指向相同，obj是window对象，所以this是window

const obj = {
    name:'abc',
    say_hi:function(){
        const func = () =>{
            console.log(this); //obj
        }
    }
};
func中this应指向function中的this，而它是一个正常函数，this就是调用它的对象obj
总的来说：箭头函数没有自己的this指向，它的this指向上一级作用域的this（根据作用域链），因此在箭头函数中要谨慎使用this来指代某个对象
在对DOM的操作中，因为有时用this指向标签，所以不推荐在DOM事件中使用箭头函数
const btn = document.querySelector('button');
btn.addEventListener('click',function() {
    console.log(this); //btn
});
btn.addEventListener('click',() => {
    console.log(this); //window
});

数组解构：将数组的单元值批量赋值给变量
const arr = [1,2,3];
const [a,b,c] = arr; //解构赋值
console.log(a,b,c); //1  2  3
相当于
const a = arr[0];
const b = arr[1];
const c = arr[2];
也可接收返回数组的函数：
function getvalue(){
    return[10,20];
}
const [a,b] = getvalue();
应用：
与python相同的多变量赋值方式--const [a,b] = [10,20];  不用分别给a,b都写一行
交换2个变量的值--[a,b] = [b,a];
数组解构的特殊情况：
1、值少变量多：多的变量为undefined
const [a,b,c] = [1,2];
console.log(a,b,c); //1  2  undefined
设置默认值可解决该问题
const [a=0,b=0,c=0] = [1,2]; //0是abc的默认值，当右侧没有值给它们时，会遵循默认值
console.log(a,b,c); //1  2  0
2、变量少值多：多的值被忽略
const [a,b] = [1,2,3];
console.log(a,b); //1  2
剩余参数可解决该问题
const [a,...arr] = [1,2,3,4];
console.log(a,arr); //1  (3)[2,3,4]
3、按需导入赋值
const [a,,c] = [1,2,3]; //没有变量接收2这个值
console.log(a,b,c); //1  2  3
4、支持多维数组解构
const [a,c] = [1,[2,3]];
console.log(a,c); //1  (2)[2,3]
const [a1,[b1,b2]] = [1,[2,3]];
console.log(a1,b1,b2); //1  2  3

JS中语句必须加分号的两种情况：
1、立即执行函数后(function(){})();   
2、如果一条语句以[]数组开头，该语句的前面要加分号
let [a,b]=[1,2]; //必须加分号
[b,a]=[a,b];
let str = 'a'; //必须加分号
[1,2,3].map(function(){});

对象解构：将对象属性方法快速赋值给变量
const obj = {
    name:'abc',
    age:20
};
const {name,age} = obj;  
console.log(name,age); //'abc'  20
相当于
const name = obj.name;
const age = obj.age;
注意：对象解构时用于接收的变量名必须与属性名相同，不相同的变量会成为undefined
如果解构时已经有了与属性名相同的变量名，可以使用  旧变量名（属性名）:新变量名  的方式
const {name:obj_name,age:obj_age} = {name:'abc',age:20};
console.log(obj_name,obj_age); //'abc'  20
可以只接收其中一部分属性：
const obj = {
    name:'abc',
    gender:'男',
    age: 20
};
const {gender} = obj;
console.log(gender); //男
数组对象解构：
const obj = [
    {
        name:'abc',
        age:20
    }
];
const [{name,age}] = obj;
多级对象解构：
const obj = {
    name: {
        first: 'abc',
        last: 'ABC'
    },
    age: 20
};
const { name: { first, last }, age } = obj;
console.log(first, last, age); //'abc'  'ABC'  20

应用：当后台传入一个含很多属性的对象，而处理函数只需用到其中一个属性时
const data = {
    code:200,
    ......
};
function render({code}){
    console.log(code); 
}
render(data); //200
相当于
function render(data){
    const {code} = data;
    console.log(code); 
}

保留小数：num.toFixed(小数位数)，若num小数点后位数<传入的位数则用0补齐，保留时遵循四舍五入的原则
const num = 10;
console.log(num.toFixed(2)); //10.00
const num1 = 1.456;
console.log(num1.toFixed(1)); //1.5
注意：不能直接写 10.toFixed(2)


深入对象：
实例化：使用new关键字调用函数的行为，实例化构造函数时若没参数传入可省略()
实例化执行过程：new创建新的空对象object；构造函数中的this指向该对象；执行构造函数代码，修改this，添加新的属性；将修改后的新对象返回
实例成员：通过构造函数创建的对象称为实例对象，实例对象中的属性方法称为实例成员/方法。实例对象是相互独立互不干扰的，所以实例成员/方法也是独立的
静态成员：构造函数的属性/方法，只能通过构造函数来访问，静态方法中的this指向构造函数，如Date.now() Math.PI等
function Person(name) { //构造函数
    this.name = name;
}
Person.eyes = 2; //静态属性
Person.sayHi = function () { //静态方法
    console.log(this);
}
Person.sayHi(); //ƒ Person(name) { this.name = name;}//构造函数
const p = new Person('abc'); //实例对象
p.age = 20; //实例属性--中存在于这个实例对象中，其它实例对象没有该属性

Object静态方法：
Object.keys(obj)--获得obj所有的属性名（以数组形式返回）
Object.values(obj)--获得obj所有的属性值（以数组形式返回）
Object.assign(des,src)--将src拷贝给des对象，也常用于给对象添加属性（des对象会添加src的属性）
const a = {
    'name':'abc',
    'age':20
};
console.log(Object.keys(a)); //(2) ['name', 'age']
console.log(Object.values(a)); //(2) ['abc', 20]
const a_copy = {};
Object.assign(a_copy,a); //将a对象拷贝给a_copy
console.log(a_copy); //{name: 'abc', age: 20}
const a_add = {
    'gender':'男',
    'height':180
};
Object.assign(a,a_add); //将a_add添加到a对象中
//也可以Object.assign(a,{'gender':'男','height':180});
console.log(a); //{name: 'abc', age: 20, gender: '男', height: 180}

原型：每一个构造函数都有一个prototype属性，它表示一个对象，称为原型对象。这个对象可以挂载函数，当构造函数实例化时不会多次构建函数，节约内存。因此可以把一些不变的方法直接定义在prototype对象上，这样所有实例都可以使用这些方法。
注意：构造函数和原型对象中this都指向实例化的对象
在使用构造函数创建类时：公共属性写到构造函数内，公共方法写到构造函数原型里
function Person(name,age){
    this.name = name;
    this.age = age; //name和age是公共属性
}
Person.prototype.sayhi=function(){ //sayhi是公共方法
    console.log(this.name);
};
const p1 = new Person('abc',20);
const p2 = new Person('ABC',22);
p1.sayhi(); //abc
p2.sayhi(); //ABC
console.log(p1.sayhi===p2.sayhi); //true
例：给数组扩展求最大值方法and求和方法，使任意数组实例对象都可使用->定义到Array原型上
Array.prototype.max = function () {
    return Math.max(...this);
};
Array.prototype.sum = function () {
    return this.reduce((prev, item) => prev + item);
};
const arr = [2, 1, 4, 5, 3, 3, 5];
console.log(arr.max()); //5
console.log(arr.sum()); //23
注意：因为Array.prototype.func是直接在window下使用的，所以不能用箭头函数来作为Array.prototype.func的接收值，因为这样箭头函数的this将指向window，而不是当前作用域中的this（即Array对象）
Array.prototype.max = () => Math.max(...this); //这样是错误的
